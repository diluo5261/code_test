一、向上转型 与向下转型
向上转型：
                发生的时机。父类引用子类的对象 
                1、直接赋值
                2、函数传参
                3、函数的返回值

向下转型：
                1、父类对象 或者 父类引用给子类的引用
                2、不安全，使用前先用 instanof 判断

二、重写与重载

重写：
         1、方法名相同
         2、方法的参数相同（个数相同）
         3、返回值也要相同。（协变类型）返回值构成父子类的关系。
         4、父类与子类之间


重载：
         1、方法名相同
         2、方法的参数不相同（个数、类型）
         3、返回值不做要求
   4、父类和子类之间，或同一个类当中

super 和 this 的区别：
super父类对象的引用、this子类对象的引用

三大特性：
1、封装性：安全性（private能不能修饰构造方法，可以，但是这个构造方法，只能在当前类进行调用。单例设计模式）
2、继承性：为了代码的重用
3、多态性：一个事物表现不同的形态；（面试官问到之后，最好除了这句话，最好再举一个例子）

多态的好处：
1、降低类的使用成本
2、降低圈复杂度，避免了使用大量的（if  else）
3、可扩展能力增强


二、抽象类：

抽象类：包含抽象对象方法的类，叫做抽象类

抽象方法：如果一个方法没有具体的实现，那么就可以使用abstract来修饰

1、抽象类不能被实例化，（  Shape shape = new Shape();  ）
2、抽象类当中，可以包含抽象方法，也可以包含非抽象方法
3、当一个普通的类，继承一个抽象类，那么这个普通类一定要实现抽象类当中的方法
4、当一个普通类，继承了抽象类，但是又不想实现这个抽象类的抽象方法，那么这个类可以改为抽象类
5、当一个普通类，继承了上述第4条说的抽象类，那么重写就是抽象类的抽象方法了。总结一句话：出来混，迟早要还的
6、抽象类本身是不可以被实例化的。那么要他有何用？就是为了继承的。
7、抽象方法就是为了重写的，不可以把抽象方法用final修饰。同时抽象方法不能是privatd的
8、父类的普通方法，在外类也可以被调用，但是需要让父类引用去引用子类对象。或者子类中用super访问父类（抽象类）的成员变量或者成员方法；
9、抽象类最大的意义就是为了被继承

总结：
            1、不能实例化
2、继承了就要重写
3、不能是final

三、接口

接口：使用关键字interface修饰
（JAVA是单继承性，接口的出现就是为了多继承）
1、接口当中的方法，默认都是抽象方法。默认省略public abstract
2、接口当中，可以定义成员变量，成员变量默认是public static final
3、接口当中的所有方法，都是没有具体实现的。
4、在JDK1.8开始，接口中的方法可以有具体实现，但是这个方法必须是defaul修饰的
5、接口也是不可以被实例化的。（ IShape iShpae = new  ISshape（）；）
6、接口的使用：类：implements接口；
7、一个类可以实现多个接口,通过关键字implements。但是注意，一定要重写每个接口里面的方法。
8、如果两个接口，方法名相同，此时在类当中，只需要重写一个各个就好了。但是最终调用的。就是这一个方法。（建议，既然接口不一样，方法名也要不一样）
9、interface D  extend  A ， B   一个接口可以扩展多个接口，也就是说。D接口，具备了A和B接口的功能。如果将来D接口被实现，那么这个实现D接口的类，就要重写A，B，D，三个接口的方法了


面试题：
抽象类和接口的区别？
1、成员变量
抽象类当中，成员变量和普通变量的定义没有区别。
接口当中：成员变量默认是public static final
2、成员方法
抽象类当中：成员方法可以有普通方法也可以有抽象方法
接口当中：默认是public abstract
3、实现方式：、
抽象类：不能被实例化，所以只能被子类使用extend关键字继承，且只能继承一个；
接口：不能被实例化，只能用implements来实现。同时一个类可以实现多个接口，一个接口可以使用extends，扩展多个接口的功能；



 

