SELECT MD5('tom');
select VERSION();
SELECT DATABASE();

#二、sql99语法
/*
语法
			select  查询列表
			from  表1  别名【连接类型】
			join  表2  别名
			on   连接条件
			
			【where 筛选条件】
			【group by  分组】
			【having 筛选条件】
			【order by 排序条件】


分裂
内连接※ ：inner
外连接：
				左外※ ：left【outer】
				右外※ ：right【outer】
				全外※ ：full【outer】

交叉连接：cross

*/

#一）内连接
/*
语法：
select 查询列表
from 表1 别名
inner join 表2 别名
on 连接条件；


分类：
			等值
			非等值
			自连接

特点：
1.添加排序，分组，筛选
2.INNER可以省略
3.筛选条件放在where后面，连接条件放在on后，提高分离性，便于阅读

*/

#1、等值连接
#案例1：查询员工名、部门名
SELECT last_name,department_name
FROM employees e
INNER JOIN departments d
ON e.department_id = d.department_id;

#案例2：查询名字中包含e的员工名和工种名

SELECT last_name,job_title
FROM employees e
INNER JOIN jobs j
ON e.job_id = j.job_id
WHERE e.last_name LIKE '%e%';

#案例3：查询部门个数>3的城市和部门个数（添加分组+筛选）

SELECT city,COUNT(*) 部门个数
FROM departments d
INNER JOIN locations j
ON d.location_id = j.location_id
GROUP BY city
HAVING COUNT(*) > 3;

#案例4：查询哪个部门的员工个数>3的部门和员工个数，并按个数降序
SELECT department_name,COUNT(*) 员工个数
FROM employees e
INNER JOIN departments d
ON e.department_id = d.department_id
GROUP BY department_name
HAVING COUNT(*) > 3;
ORDER BY COUNT(*) DESC;

#案例5：查询员工名，部门名，工种部门名降序（添加三表连接）

SELECT last_name,department_name,job_title
FROM employees e
INNER JOIN departments d ON e.department_id = d.department_id
INNER JOIN jobs j ON e.job_id = j.job_id
ORDER BY department_name DESC;

#二）非等值连接

#查询员工的工资级别
SELECT salary,grade_level
FROM employees e
JOIN job_grades j
ON e.salary BETWEEN j.lowest_sal AND j.highest_sal;

#查询工资级别的个数>20的个数，并按工资级别降序
SELECT count(*) 级别员工个数,grade_level
from employees e
JOIN job_grades j ON  e.salary BETWEEN j.lowest_sal AND j.highest_sal
GROUP BY grade_level
HAVING 级别员工个数 > 20
ORDER BY grade_level DESC;

#三）自连接
#查询员工的名字、上级的名字
SELECT 员工.last_name,老板.last_name
FROM employees 员工
JOIN employees 老板
ON 员工.manager_id = 老板.employee_id;

#二、外连接
/*
应用场景：用于查询一个表中有，另一个表中没有的场景
特点：
1、外连接的查询结果为主表中的所有记录
如果从表中有和他匹配的，则显示匹配的值
如果从表中没有和它匹配的，则显示null
外连接查询结果 = 内连接

2.左外连接，left join左边的是主表
	右外连接，right join右边的是主表

3.左外和右外交换两个表的顺序，可以实现相同的效果
4.全外连接 = 内连接的结果 + 表1中有表2中没有的+表2中有表1中没有的
	两个表的交集加每个表的私有集
	
*/
USE girls;
#引入：查询男朋友不在男生表的女生表
#左外连接

SELECT * FROM beauty;
SELECT * FROM boys;

SELECT b.*,bo.*
FROM beauty b
LEFT OUTER JOIN boys bo
ON b.boyfriend_id = bo.id;
WHERE bo.id IS NULL;

SELECT b.*,bo.*
FROM boys bo
LEFT OUTER JOIN beauty b
ON b.boyfriend_id = bo.id;

#案例1：查询哪个部门没有员工
#左外
SELECT d.*,e.employee_id
FROM departments d
LEFT OUTER JOIN employees e
ON d.department_id = e.department_id;




#全外连接
USE girls;
SELECT b.*,bo.*
FROM beauty b
FULL OUTER JOIN boys bo
ON b.boyfriend_id = bo.id;



#交叉连接
SELECT b.*,bo.*
FROM beauty b
CROSS JOIN boys bo;

#功能：sql99支持的较多
#

#一、查询编号>3的女神的男朋友的信息，如果有则列出信息，没有则用null填充
SELECT b.id,b.`name`,bo.*
FROM beauty b
LEFT OUTER JOIN boys bo
ON b.boyfriend_id = bo.id
WHERE b.id > 3;

#查询哪个城市没有部门

SELECT city
FROM departments d
RIGHT OUTER JOIN locations l
ON d.location_id = l.location_id
WHERE d.location_id IS NULL;

#查询部门名为SAL或IT的员工信息

SELECT e.*,d.department_name
FROM departments d
LEFT JOIN employees e
ON d.department_id = e.department_id
WHERE d.department_name IN ('SAL','IT');

#进阶7：子查询
/*
含义：出现在其他语句中的select语句，称为子查询或内查询
外部的查询语句，称为主查询语句
分类：
按子查询出现的位置：
			select后面：
									仅仅支持变量子查询
			from后面：
								支持表子查询
			where或having后面：★
									标量子查询（单行）√
									列子查询	（多行）√
									行子查询
			exists后面（相关子查询）
									表子查询
									
按结果集的行列数不同：
							标量子查询（结果集只用一行一列）
							列子查询（结果集只有一列多行）
							行子查询（结果集有一行多列）
							表子查询（结果集一般为多行多列）
*/











